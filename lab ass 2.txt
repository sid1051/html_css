clc; clear;

% Assignment 2: Orthogonal projection vs Interpolant (Assembly Method)
% Roll number = 221051 â†’ Nodal points = 221051

% Interval
a = 0; b = 1;
N = 221051;              % number of nodes
h = (b-a)/(N-1);         % element size
x = linspace(a,b,N)';    % nodal coordinates

% Functions
f1 = @(x) x.^2;             
f2 = @(x) 3*sin(2*pi*x);    

%% ===============================
% Assembly of Mass Matrix (tridiagonal)
main_diag = (2*h/3) * ones(N,1);
off_diag  = (h/6)   * ones(N-1,1);
M = spdiags([ [off_diag;0] main_diag [0;off_diag] ], [-1 0 1], N, N);

%% ===============================
% Assembly of Load Vectors (2-pt Gauss quadrature)
F1 = zeros(N,1);
F2 = zeros(N,1);
xi = [-1/sqrt(3), 1/sqrt(3)];
w  = [1, 1];

for e = 1:N-1
    % element nodes
    x1 = x(e); x2 = x(e+1);
    J = (x2-x1)/2;
    
    % local contributions
    Fe1 = zeros(2,1); Fe2 = zeros(2,1);
    
    for q = 1:2
        % mapped quadrature point
        xq = ((1-xi(q))*x1 + (1+xi(q))*x2)/2;
        phi = [(1-xi(q))/2; (1+xi(q))/2]; % linear basis
        
        Fe1 = Fe1 + w(q)*f1(xq)*phi*J;
        Fe2 = Fe2 + w(q)*f2(xq)*phi*J;
    end
    
    % assembly
    F1([e,e+1]) = F1([e,e+1]) + Fe1;
    F2([e,e+1]) = F2([e,e+1]) + Fe2;
end

%% ===============================
% Solve MU = F  (Orthogonal projection)
U1 = M\F1;
U2 = M\F2;

%% ===============================
% LAB 1: Continuous Piecewise Linear Interpolant (manual)
I1 = zeros(N,1);
I2 = zeros(N,1);

for e = 1:N-1
    % element nodes
    x1 = x(e); x2 = x(e+1);
    f1_x1 = f1(x1); f1_x2 = f1(x2);
    f2_x1 = f2(x1); f2_x2 = f2(x2);
    
    % linear basis coefficients
    for k = e:e+1
        if k == e
            I1(k) = f1_x1;
            I2(k) = f2_x1;
        else
            I1(k) = f1_x2;
            I2(k) = f2_x2;
        end
    end
end

%% ===============================
% Pointwise comparison (sample 10 evenly spaced nodes)
sample_idx = round(linspace(1,N,10));

disp('Comparison for f(x) = x^2');
disp(table(x(sample_idx), I1(sample_idx), U1(sample_idx), ...
    'VariableNames', {'x','Interpolant','Projection'}));

disp('Comparison for f(x) = 3sin(2 pi x)');
disp(table(x(sample_idx), I2(sample_idx), U2(sample_idx), ...
    'VariableNames', {'x','Interpolant','Projection'}));

% ---- Plotting results ----

figure;

% Case 1: f(x) = x
subplot(1,2,1);
plot(x, f1(x), 'k-', 'LineWidth', 1.5); hold on;
plot(x, I1, 'r--', 'LineWidth', 1.5);
plot(x, U1, 'b-.', 'LineWidth', 1.5);
legend('f(x)=x^2','Interpolant','Projection','Location','best');
title('Comparison for f(x) = x^2');
xlabel('x'); ylabel('y');
grid on;

% Case 2: f(x) = sin(pi x)
subplot(1,2,2);
plot(x, f2(x), 'k-', 'LineWidth', 1.5); hold on;
plot(x, I2, 'r--', 'LineWidth', 1.5);
plot(x, U2, 'b-.', 'LineWidth', 1.5);
legend('f(x)=3sin(2 \pi x)','Interpolant','Projection','Location','best');
title('Comparison for f(x) = 3sin(2 \pi x)');
xlabel('x'); ylabel('y');
grid on;
